###########################################################
Compilation instructions:
>> cd src
>> make

Note:
To compile the program using MPI (currently work in progress...)
    Set "USE_MPI = 1" in /src/Makefile
To compile the serial program
    Set "USE_MPI = 0" in /src/Makefile
(make clean before trying to switch from serial to parallel versions)    

###########################################################
Run instructions (from src directory):
>> ./EMOOPIC path/to/inputfile.txt
e.g.
>> ./EMOOPIC ../data/unitest/input.txt
For parallel version, recompile (see above) and use mpirun, e.g.
>> mpirun -np 16 ./EMOOPIC ../data/unitest/input_MPI.txt

###########################################################
Input file instructions 
  The input.txt is self-documenting
  For further details, see /src/IO/input.hpp 
  Below are some notices

   ## domain inputs
      nProc: total number of processors specified here should match 
             what is requested when submitting the job

   ## runtime inputs
      nTiesteps: should be larger than 0
  
   ## initialization inputs
      restart: When >0, there should be restart files ready to be read

      # particle initialization
        nSpecies: should be smaller than NSPEC defined in /src/IO/input.hpp 

        mass_ratio[ispec],charge_ratio[ispec],dens_frac[ispec], etc. specifies species ispec

      # field initialization


   ## boundary condition inputs
      conditions: in each direction, if on side is "periodic", then the other side must
                  also be "periodic"

      # particle boundary

      # field boundary
        external: these inputs will be read if and only if there is "external"
                  in the boundary input. 
                  eg. if conditions[1]="periodic", conditions[3]="external", 
                      and inSide = [-1,2], then inPolE[0], corresponding to 
                      inSide[0]=-1, namely, wave injecttion in xleft, will
                      be ignored; while inPolE[1], corresponding to inSide[1]=2, 
                      namely, wave injection in yright, will be meaninful to the program. 

   ## diagnostic inputs 


###########################################################
Unit testing (serial only for now...):
executing make in src directory compiles google test unit tests 
and runs all unit tests automatically.

in src directory, can also use
>> make run_tests
or in test directory,
>> make run_tests
