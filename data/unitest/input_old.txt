domain:
{
  # number of cells in each dimension
  nCell = [ 4, 4, 4 ]

  # number of processors in each dimension (parallel version only)
  nProc = [ 1, 1, 1 ]

  # origin of simulation domain
  xyz0 = [0.0, 0.0, 0.0]

  # physical length of simulation domain, in unit of cm
  Lxyz = [0.5, 0.1, 0.1]

}

runtime: 
{
  # number of time steps to run
  nTimesteps = 1

  # start time
  startTime = 0.0

  # debug = 1 turns on basic debug print statements
  # debug = 2 turns on more debug print statements
  debug = 2
}

initialization:
{
  # whether this is restart of a previous run
  restart = 0

  # particle initialization
  particles:
  {
    # whether use relaticistic pusher
    relativity = 0

    # number of species
    nspecies = 2

    # mass of each species in unit of electron mass
    mass_ratio = [1.0, 1836.13]

    # charge of each species in unit of |e|
    charge_ratio = [-1.0, 1.0]

    # is the species a test particle? (0 = no, 1 = yes)
    isTestParticle = [0, 0]

    # fractional density of species
    dens_frac = [0.5,0.5]  

    # number of particles of all species in each domain
    nParticles = 16
  
    # position distribution function
    xdist = "sinusoid"
    #xdist = "delta function"
    #xdist = "file: xdist.dat"
  
    # velocity distribution function
    vdist = "maxwellian"
    #vdist = "waterbag"
    #vdist = "file: vdist.dat"
  
    maxwellian:
    {
      # density of nspecies in unit of 10^18 cm^{-3}
      # used to scale super particle mass and charge
      density = [0.1, 0.1]

      # temperature of nspecies in unit of eV
      temperature = [100.0, 1.0]
    }
  
    sinusoid:
    {
      k = [ 1, 1, 1 ]
    }
  }
 
  fields:
  {
    # Whether to use electrostatic solver
    electrostatic = 0

    # How to initialize fields?
    init = "constant"
    #init = "poisson"
    #init = "file: fields.dat"

    # constant background/boundary magnetic field. 1->1kG
    B0 = [0.0, 0.2, 1.0]

    # constant background/boundary electric field. 1->299.79KV/cm
    E0 = [0.001, 0.0, 0.0]

  }
}

boundary:
{
  # Note: in each direction, if on side is "periodic", the other side must also be "periodic"

  # particle boundary
  particles:
  {
    # conditions = [xleft,xright,yleft,yright,zleft,zright]
    conditions = ["reflecting","reflecting", 
                "periodic","periodic",
                "periodic","periodic"]
  }


  # field boundary 
  fields:
  {
    # conditions = [xleft,xright,yleft,yright,zleft,zright]
    conditions = ["external","external", 
                "periodic","periodic",
                "periodic","periodic"]

    ## If and only if conditions[i]="external", will the following be meaningful in i-direction 
    ## eg. if conditions[1]="periodic", conditions[3]="external", and inSide = [-1,2],
    ## then inPolE[0], corresponding to inSide[0]=-1, namely, wave injection in xleft, will
    ## be ignored; while inPolE[1], corresponding to inSide[1]=2, namely, wave injection
    ## in yright, will be meaninful to the program. 
    external:
    {
        # number of waves to inject
        nwaves = 3
     
        # from which sides are waves injectes
        inSide = [-1, -1, 2]
     
        # Which direction are wave E fields aligned with?
        inPolE = [1, 2, 1]
     
        # What are the wave E field amplitudes? amps=1 -> E=299.79KV/cm
        peakamps = [0.0001, 0.001, 0.0003]
     
        # What are the wave frequencies? omegas=1 -> 190.40 GHz
        omegas = [1.2, 5.6, 3.7]
     
        # What are the wave phases in degree?
        phases = [90.0, 0.0, 45.0]

        # What are the inverse Width of pulses? invWidths=0 -> pulse duration infinity
        invWidths = [0.2, 0.0, 0.8]

        # What are the delays of pulses? delyas=1 -> 33.4 ps, w.r.t time_phys
        delays = [-0.2, 0.0, 1.2]
    }
  }
}

diagnostics:
{
  # How many time steps between each diagnostic
  nwrite = 1

  particles:
  {
    # How many particle/species to track by each core?
    output_pCount = 1
  }

  fields:
  {
    # Which fields to write time series?
    # 0:rho, 1:E, 2:B, 3:J, 4:all
    which_fields = 4 
  }
}

